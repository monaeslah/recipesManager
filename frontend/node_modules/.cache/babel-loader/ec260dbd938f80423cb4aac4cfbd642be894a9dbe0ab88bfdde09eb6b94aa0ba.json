{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  recipes: []\n};\n// Utility function to load state from local storage\nconst loadStateFromLocalStorage = () => {\n  try {\n    const serializedState = localStorage.getItem('recipes');\n    if (serializedState === null) {\n      return {\n        recipes: []\n      }; // No state in local storage, return default state\n    }\n    return JSON.parse(serializedState);\n  } catch (err) {\n    console.error('Could not load state from local storage', err);\n    return {\n      recipes: []\n    }; // On error, return default state\n  }\n};\n\n// Utility function to save state to local storage\nconst saveStateToLocalStorage = state => {\n  try {\n    const serializedState = JSON.stringify(state);\n    localStorage.setItem('recipes', serializedState);\n  } catch (err) {\n    console.error('Could not save state to local storage', err);\n  }\n};\nconst recipesSlice = createSlice({\n  name: 'recipes',\n  initialState,\n  reducers: {\n    setRecipes: (state, action) => {\n      state.recipes = action.payload;\n    },\n    addRecipe: (state, action) => {\n      state.recipes.push(action.payload);\n    },\n    removeRecipe(state, action) {\n      state.recipes = state.recipes.filter(recipe => recipe.id !== action.payload);\n      saveStateToLocalStorage(state);\n    },\n    updateRecipe(state, action) {\n      const index = state.recipes.findIndex(recipe => recipe.id === action.payload.id);\n      if (index !== -1) {\n        state.recipes[index] = action.payload;\n        saveStateToLocalStorage(state);\n      }\n    }\n  }\n});\nexport const {\n  addRecipe,\n  removeRecipe,\n  updateRecipe\n} = recipesSlice.actions;\nexport default recipesSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","recipes","loadStateFromLocalStorage","serializedState","localStorage","getItem","JSON","parse","err","console","error","saveStateToLocalStorage","state","stringify","setItem","recipesSlice","name","reducers","setRecipes","action","payload","addRecipe","push","removeRecipe","filter","recipe","id","updateRecipe","index","findIndex","actions","reducer"],"sources":["/Users/arash/Desktop/recipesManager/frontend/src/features/recipesSlice.ts"],"sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { Recipe, RecipesState } from '../types/interface'\nconst initialState: RecipesState = {\n  recipes: []\n}\n// Utility function to load state from local storage\nconst loadStateFromLocalStorage = (): RecipesState => {\n  try {\n    const serializedState = localStorage.getItem('recipes')\n    if (serializedState === null) {\n      return { recipes: [] } // No state in local storage, return default state\n    }\n    return JSON.parse(serializedState)\n  } catch (err) {\n    console.error('Could not load state from local storage', err)\n    return { recipes: [] } // On error, return default state\n  }\n}\n\n// Utility function to save state to local storage\nconst saveStateToLocalStorage = (state: RecipesState) => {\n  try {\n    const serializedState = JSON.stringify(state)\n    localStorage.setItem('recipes', serializedState)\n  } catch (err) {\n    console.error('Could not save state to local storage', err)\n  }\n}\n\nconst recipesSlice = createSlice({\n  name: 'recipes',\n  initialState,\n  reducers: {\n    setRecipes: (state, action: PayloadAction<Recipe[]>) => {\n      state.recipes = action.payload\n    },\n    addRecipe: (state, action: PayloadAction<Recipe>) => {\n      state.recipes.push(action.payload)\n    },\n    removeRecipe (state, action: PayloadAction<string>) {\n      state.recipes = state.recipes.filter(\n        recipe => recipe.id !== action.payload\n      )\n      saveStateToLocalStorage(state)\n    },\n    updateRecipe (state, action: PayloadAction<Recipe>) {\n      const index = state.recipes.findIndex(\n        recipe => recipe.id === action.payload.id\n      )\n      if (index !== -1) {\n        state.recipes[index] = action.payload\n        saveStateToLocalStorage(state)\n      }\n    }\n  }\n})\n\nexport const { addRecipe, removeRecipe, updateRecipe } = recipesSlice.actions\nexport default recipesSlice.reducer\n"],"mappings":"AAAA,SAASA,WAAW,QAAuB,kBAAkB;AAE7D,MAAMC,YAA0B,GAAG;EACjCC,OAAO,EAAE;AACX,CAAC;AACD;AACA,MAAMC,yBAAyB,GAAGA,CAAA,KAAoB;EACpD,IAAI;IACF,MAAMC,eAAe,GAAGC,YAAY,CAACC,OAAO,CAAC,SAAS,CAAC;IACvD,IAAIF,eAAe,KAAK,IAAI,EAAE;MAC5B,OAAO;QAAEF,OAAO,EAAE;MAAG,CAAC,EAAC;IACzB;IACA,OAAOK,IAAI,CAACC,KAAK,CAACJ,eAAe,CAAC;EACpC,CAAC,CAAC,OAAOK,GAAG,EAAE;IACZC,OAAO,CAACC,KAAK,CAAC,yCAAyC,EAAEF,GAAG,CAAC;IAC7D,OAAO;MAAEP,OAAO,EAAE;IAAG,CAAC,EAAC;EACzB;AACF,CAAC;;AAED;AACA,MAAMU,uBAAuB,GAAIC,KAAmB,IAAK;EACvD,IAAI;IACF,MAAMT,eAAe,GAAGG,IAAI,CAACO,SAAS,CAACD,KAAK,CAAC;IAC7CR,YAAY,CAACU,OAAO,CAAC,SAAS,EAAEX,eAAe,CAAC;EAClD,CAAC,CAAC,OAAOK,GAAG,EAAE;IACZC,OAAO,CAACC,KAAK,CAAC,uCAAuC,EAAEF,GAAG,CAAC;EAC7D;AACF,CAAC;AAED,MAAMO,YAAY,GAAGhB,WAAW,CAAC;EAC/BiB,IAAI,EAAE,SAAS;EACfhB,YAAY;EACZiB,QAAQ,EAAE;IACRC,UAAU,EAAEA,CAACN,KAAK,EAAEO,MAA+B,KAAK;MACtDP,KAAK,CAACX,OAAO,GAAGkB,MAAM,CAACC,OAAO;IAChC,CAAC;IACDC,SAAS,EAAEA,CAACT,KAAK,EAAEO,MAA6B,KAAK;MACnDP,KAAK,CAACX,OAAO,CAACqB,IAAI,CAACH,MAAM,CAACC,OAAO,CAAC;IACpC,CAAC;IACDG,YAAYA,CAAEX,KAAK,EAAEO,MAA6B,EAAE;MAClDP,KAAK,CAACX,OAAO,GAAGW,KAAK,CAACX,OAAO,CAACuB,MAAM,CAClCC,MAAM,IAAIA,MAAM,CAACC,EAAE,KAAKP,MAAM,CAACC,OACjC,CAAC;MACDT,uBAAuB,CAACC,KAAK,CAAC;IAChC,CAAC;IACDe,YAAYA,CAAEf,KAAK,EAAEO,MAA6B,EAAE;MAClD,MAAMS,KAAK,GAAGhB,KAAK,CAACX,OAAO,CAAC4B,SAAS,CACnCJ,MAAM,IAAIA,MAAM,CAACC,EAAE,KAAKP,MAAM,CAACC,OAAO,CAACM,EACzC,CAAC;MACD,IAAIE,KAAK,KAAK,CAAC,CAAC,EAAE;QAChBhB,KAAK,CAACX,OAAO,CAAC2B,KAAK,CAAC,GAAGT,MAAM,CAACC,OAAO;QACrCT,uBAAuB,CAACC,KAAK,CAAC;MAChC;IACF;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAES,SAAS;EAAEE,YAAY;EAAEI;AAAa,CAAC,GAAGZ,YAAY,CAACe,OAAO;AAC7E,eAAef,YAAY,CAACgB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}